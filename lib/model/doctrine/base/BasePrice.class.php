<?php

/**
 * BasePrice
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $product_id
 * @property integer $store_id
 * @property float $price
 * @property Product $Product
 * @property Store $Store
 * 
 * @method integer getProductId()  Returns the current record's "product_id" value
 * @method integer getStoreId()    Returns the current record's "store_id" value
 * @method float   getPrice()      Returns the current record's "price" value
 * @method Product getProduct()    Returns the current record's "Product" value
 * @method Store   getStore()      Returns the current record's "Store" value
 * @method Price   setProductId()  Sets the current record's "product_id" value
 * @method Price   setStoreId()    Sets the current record's "store_id" value
 * @method Price   setPrice()      Sets the current record's "price" value
 * @method Price   setProduct()    Sets the current record's "Product" value
 * @method Price   setStore()      Sets the current record's "Store" value
 * 
 * @package    wepost
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePrice extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('price');
        $this->hasColumn('product_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('store_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('price', 'float', null, array(
             'type' => 'float',
             ));


        $this->index('price_index', array(
             'fields' => 'price',
             ));
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Product', array(
             'local' => 'product_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Store', array(
             'local' => 'store_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));
    }
}