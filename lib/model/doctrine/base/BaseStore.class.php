<?php

/**
 * BaseStore
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property float $longitude
 * @property float $latitude
 * @property string $address
 * @property float $rating
 * @property string $operatetime
 * @property string $contactphone
 * @property string $contactemail
 * @property string $contactwebsite
 * @property integer $parking
 * @property Doctrine_Collection $Sales
 * @property Doctrine_Collection $Price
 * 
 * @method string              getName()           Returns the current record's "name" value
 * @method float               getLongitude()      Returns the current record's "longitude" value
 * @method float               getLatitude()       Returns the current record's "latitude" value
 * @method string              getAddress()        Returns the current record's "address" value
 * @method float               getRating()         Returns the current record's "rating" value
 * @method string              getOperatetime()    Returns the current record's "operatetime" value
 * @method string              getContactphone()   Returns the current record's "contactphone" value
 * @method string              getContactemail()   Returns the current record's "contactemail" value
 * @method string              getContactwebsite() Returns the current record's "contactwebsite" value
 * @method integer             getParking()        Returns the current record's "parking" value
 * @method Doctrine_Collection getSales()          Returns the current record's "Sales" collection
 * @method Doctrine_Collection getPrice()          Returns the current record's "Price" collection
 * @method Store               setName()           Sets the current record's "name" value
 * @method Store               setLongitude()      Sets the current record's "longitude" value
 * @method Store               setLatitude()       Sets the current record's "latitude" value
 * @method Store               setAddress()        Sets the current record's "address" value
 * @method Store               setRating()         Sets the current record's "rating" value
 * @method Store               setOperatetime()    Sets the current record's "operatetime" value
 * @method Store               setContactphone()   Sets the current record's "contactphone" value
 * @method Store               setContactemail()   Sets the current record's "contactemail" value
 * @method Store               setContactwebsite() Sets the current record's "contactwebsite" value
 * @method Store               setParking()        Sets the current record's "parking" value
 * @method Store               setSales()          Sets the current record's "Sales" collection
 * @method Store               setPrice()          Sets the current record's "Price" collection
 * 
 * @package    wepost
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseStore extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('store');
        $this->hasColumn('name', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('longitude', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('latitude', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('address', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('rating', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('operatetime', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('contactphone', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('contactemail', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('contactwebsite', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('parking', 'integer', null, array(
             'type' => 'integer',
             ));

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Sale as Sales', array(
             'local' => 'id',
             'foreign' => 'store_id'));

        $this->hasMany('Price', array(
             'local' => 'id',
             'foreign' => 'store_id'));
    }
}